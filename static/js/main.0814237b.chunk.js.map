{"version":3,"sources":["isometric/PERSPECTIVE.ts","isometric/objects/LinePath.tsx","isometric/3d/Anchor.tsx","isometric/3d/Container.tsx","isometric/objects/MonochromeBox.tsx","isometric/objects/MonochromeTile.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PERSPECTIVE","degrees","tileSize","isometricAngle","Math","PI","_isometricCos","cos","_isometricSin","sin","_isometricTan","tan","tileHeight","radians","toPixels","x","y","z","toCoords","cartX","cartY","isoY","createPerspective","LinePath","path","stroke","strokeWidth","spatialCoordinates","map","coordinate","cc","c","reduce","lines","start","i","all","concat","x1","y1","x2","y2","String","Crosshair","size","points","Anchor","children","crosshairSize","pixels","overflow","Svg","styled","svg","svgAttributes","width","height","viewBox","shapeRendering","Container","rest","coordsToPixels","coords","borderWidth","COORDINATE_CLOSEST_TO_CAMERA","BORDER_NODES","XZ_NODES","YZ_NODES","XY_NODES","MonochromeBox","fill","Color","strokeLinecap","darken","saturate","innerStroke","lighten","desaturate","innerStrokeWidth","innerStrokeCss","string","strokeCss","join","AppHeader","header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","styles","css","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.0814237b.chunk.js","sourcesContent":["//     z+\n//     |     y+\n//     |    /\n//     |  /\n//     |/\n// 0,0  \\\n//        \\\n//          \\ x+\n\nconst BASE_LENGTH = 12;\n\nexport type CoordValue = number;\nexport type Length = number;\nexport type Angle = number;\nexport type CoordArray = [CoordValue, CoordValue, CoordValue];\nexport type CoordObject = { x: CoordValue; y: CoordValue; z: CoordValue };\n\nfunction createPerspective(degrees: Angle, tileSize: Length) {\n\tconst isometricAngle = degrees * (Math.PI / 180);\n\tconst _isometricCos = Math.cos(isometricAngle);\n\tconst _isometricSin = Math.sin(isometricAngle);\n\tconst _isometricTan = Math.tan(isometricAngle);\n\n\t// const _isometricDist = Math.sqrt(Math.pow(_isometricCos, 2) + Math.pow(_isometricSin, 2)); // pythagoras\n\n\tconst tileHeight = tileSize;\n\n\treturn {\n\t\tdegrees: degrees,\n\t\tradians: degrees * (Math.PI / 180),\n\t\ttileSize: tileSize,\n\t\ttoPixels: (x: CoordValue, y: CoordValue, z: CoordValue) => {\n\t\t\tconst cartX = (x + y) * _isometricCos,\n\t\t\t\tcartY = (x - y) * _isometricSin;\n\n\t\t\treturn [\n\t\t\t\tcartX * tileSize, // x\n\t\t\t\tcartY * tileSize - tileHeight * z // y\n\t\t\t];\n\t\t},\n\t\ttoCoords: (cartX: CoordValue, cartY: CoordValue) => {\n\t\t\tconst isoY = _isometricTan * cartX + cartY,\n\t\t\t\tisoX = (cartY - isoY) / -_isometricSin - isoY;\n\n\t\t\t// this is good so far, b should be rescaled for tile size. as\n\t\t\treturn [isoX / tileSize, isoY / tileSize];\n\t\t}\n\t};\n}\n\nexport const PERSPECTIVE = createPerspective(30, BASE_LENGTH);\n","import React, { FunctionComponent, ReactElement } from 'react';\n\nimport { CoordArray, PERSPECTIVE } from '../PERSPECTIVE';\n\nconst BORDER_WIDTH = 0;\n\nexport const LinePath: FunctionComponent<\n\tOmit<React.SVGProps<SVGLineElement>, 'path'> & {\n\t\tpath: CoordArray[];\n\t}\n> = ({ path, stroke = 'black', strokeWidth = BORDER_WIDTH }) => {\n\tlet spatialCoordinates = path\n\t\t.map(coordinate => PERSPECTIVE.toPixels(...coordinate))\n\t\t.map(cc => cc.map(c => c + BORDER_WIDTH));\n\n\treturn (\n\t\t<>\n\t\t\t{spatialCoordinates.reduce<ReactElement[]>(\n\t\t\t\t(lines, start, i, all) =>\n\t\t\t\t\ti\n\t\t\t\t\t\t? lines.concat([\n\t\t\t\t\t\t\t\t<line\n\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\tx1={start[0]}\n\t\t\t\t\t\t\t\t\ty1={start[1]}\n\t\t\t\t\t\t\t\t\tx2={all[i - 1][0]}\n\t\t\t\t\t\t\t\t\ty2={all[i - 1][1]}\n\t\t\t\t\t\t\t\t\tstroke={stroke}\n\t\t\t\t\t\t\t\t\tstrokeWidth={String(strokeWidth)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t  ])\n\t\t\t\t\t\t: lines,\n\t\t\t\t[]\n\t\t\t)}\n\t\t</>\n\t);\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { CoordArray, CoordObject, Length, PERSPECTIVE } from '../PERSPECTIVE';\nimport { LinePath } from '../objects/LinePath';\n\nconst Crosshair: FunctionComponent<{ size: Length }> = ({ size = 4 }) => {\n\tconst lines: CoordArray[][] = [\n\t\t[\n\t\t\t// over the x axis\n\t\t\t[-1 * size, 0, 0],\n\t\t\t[size, 0, 0]\n\t\t],\n\t\t[\n\t\t\t// over the y axis\n\t\t\t[0, -1 * size, 0],\n\t\t\t[0, size, 0]\n\t\t],\n\t\t[\n\t\t\t// over the z axis\n\t\t\t[0, 0, -1 * size],\n\t\t\t[0, 0, size]\n\t\t]\n\t];\n\n\treturn (\n\t\t<>\n\t\t\t{lines.map((points, i) => (\n\t\t\t\t<LinePath\n\t\t\t\t\tkey={i}\n\t\t\t\t\tpath={points}\n\t\t\t\t\tstroke={'rgba(0,0,0)'}\n\t\t\t\t\tstrokeWidth={0.5}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</>\n\t);\n};\n\nexport const Anchor: FunctionComponent<\n\t{\n\t\tcrosshairSize?: Length;\n\t} & CoordObject\n> = ({ x = 0, y = 0, z = 0, children, crosshairSize = 0 }) => {\n\tconst pixels = PERSPECTIVE.toPixels(x, y, z);\n\n\treturn (\n\t\t<svg\n\t\t\t{...{\n\t\t\t\tx: pixels[0],\n\t\t\t\ty: pixels[1],\n\t\t\t\toverflow: 'visible'\n\t\t\t}}\n\t\t>\n\t\t\t{crosshairSize ? <Crosshair size={crosshairSize} /> : null}\n\t\t\t{children}\n\t\t</svg>\n\t);\n};\n","import React, { FunctionComponent } from 'react';\n\nimport styled from '@emotion/styled';\n\nexport const Svg = styled.svg`\n\tposition: absolute;\n\tleft: 50%;\n\ttop: 50%;\n`;\n\nconst svgAttributes = {\n\t// svg and viewbox\n\twidth: '1px',\n\theight: '1px',\n\tviewBox: '0 0 1 1',\n\toverflow: 'visible',\n\n\t// svg rendering\n\tshapeRendering: 'geometricPrecision'\n};\n\nexport const Container: FunctionComponent<\n\t{} & React.SVGProps<SVGSVGElement>\n> = ({ children, ...rest }) => {\n\treturn (\n\t\t<Svg {...svgAttributes} {...rest}>\n\t\t\t{children}\n\t\t</Svg>\n\t);\n};\n","import Color from 'color';\nimport React, { FunctionComponent } from 'react';\n\nimport { CoordArray, Length, PERSPECTIVE } from '../PERSPECTIVE';\n\nconst BORDER_WIDTH = 0;\n\nfunction coordsToPixels(coords: CoordArray[], borderWidth = BORDER_WIDTH) {\n\treturn coords\n\t\t.map(coordinate => PERSPECTIVE.toPixels(...coordinate))\n\t\t.map(cc => cc.map(c => c + borderWidth));\n}\nconst COORDINATE_CLOSEST_TO_CAMERA = PERSPECTIVE.toPixels(1, 0, 1).map(\n\tc => c + BORDER_WIDTH\n);\n\nlet BORDER_NODES = coordsToPixels([\n\t[1, 1, 0], // 0\n\t[1, 1, 1],\n\t[0, 1, 1], // 2\n\t[0, 0, 1],\n\t[0, 0, 0], // 4\n\t[1, 0, 0]\n]);\n\n// facing to the bottom left, aka -y\nlet XZ_NODES = coordsToPixels([\n\t[0, 0, 0],\n\t[0, 0, 1],\n\t[1, 0, 1],\n\t[1, 0, 0]\n]);\n\n// facing to the bottom right, aka +x\nlet YZ_NODES = coordsToPixels([\n\t[1, 0, 0],\n\t[1, 1, 0],\n\t[1, 1, 1],\n\t[1, 0, 1]\n]);\n\n// facing top, aka +z\nlet XY_NODES = coordsToPixels([\n\t[0, 0, 1],\n\t[1, 0, 1],\n\t[1, 1, 1],\n\t[0, 1, 1]\n]);\n\nexport const MonochromeBox: FunctionComponent<{\n\tstrokeLinecap?: 'round' | 'butt' | 'square' | 'inherit' | undefined;\n\tfill?: Color;\n\tstrokeWidth?: Length;\n\tinnerStrokeWidth?: Length;\n\tstroke?: Color;\n\tinnerStroke?: Color;\n}> = ({\n\tfill = Color('gray'),\n\n\tstrokeLinecap = 'round',\n\n\tstroke = fill.darken(0.3).saturate(0.3),\n\tstrokeWidth = 1,\n\n\tinnerStroke = fill.lighten(0.4).desaturate(0.8),\n\tinnerStrokeWidth = strokeWidth\n}) => {\n\tconst innerStrokeCss = innerStroke && innerStroke.string();\n\tconst strokeCss = stroke && stroke.string();\n\n\treturn (\n\t\t<>\n\t\t\t{fill && (\n\t\t\t\t<>\n\t\t\t\t\t<polygon\n\t\t\t\t\t\tkey={'xz'}\n\t\t\t\t\t\tpoints={XZ_NODES.map(c => c.join(',')).join(' ')}\n\t\t\t\t\t\tfill={fill.string()}\n\t\t\t\t\t\tstrokeWidth={0}\n\t\t\t\t\t/>\n\t\t\t\t\t<polygon\n\t\t\t\t\t\tkey={'xy'}\n\t\t\t\t\t\tpoints={XY_NODES.map(c => c.join(',')).join(' ')}\n\t\t\t\t\t\tfill={fill.lighten(0.2).string()}\n\t\t\t\t\t\tstrokeWidth={0}\n\t\t\t\t\t/>\n\t\t\t\t\t<polygon\n\t\t\t\t\t\tkey={'yz'}\n\t\t\t\t\t\tpoints={YZ_NODES.map(c => c.join(',')).join(' ')}\n\t\t\t\t\t\tfill={fill.darken(0.2).string()}\n\t\t\t\t\t\tstrokeWidth={0}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{innerStroke && (\n\t\t\t\t<>\n\t\t\t\t\t<line\n\t\t\t\t\t\tkey={'x-bar'}\n\t\t\t\t\t\tx1={COORDINATE_CLOSEST_TO_CAMERA[0]}\n\t\t\t\t\t\ty1={COORDINATE_CLOSEST_TO_CAMERA[1]}\n\t\t\t\t\t\tx2={BORDER_NODES[3][0]}\n\t\t\t\t\t\ty2={BORDER_NODES[3][1]}\n\t\t\t\t\t\tstroke={innerStrokeCss}\n\t\t\t\t\t\tstrokeWidth={innerStrokeWidth}\n\t\t\t\t\t\tstrokeLinecap={strokeLinecap}\n\t\t\t\t\t/>\n\t\t\t\t\t<line\n\t\t\t\t\t\tkey={'y-bar'}\n\t\t\t\t\t\tx1={COORDINATE_CLOSEST_TO_CAMERA[0]}\n\t\t\t\t\t\ty1={COORDINATE_CLOSEST_TO_CAMERA[1]}\n\t\t\t\t\t\tx2={BORDER_NODES[1][0]}\n\t\t\t\t\t\ty2={BORDER_NODES[1][1]}\n\t\t\t\t\t\tstroke={innerStrokeCss}\n\t\t\t\t\t\tstrokeWidth={innerStrokeWidth}\n\t\t\t\t\t\tstrokeLinecap={strokeLinecap}\n\t\t\t\t\t/>\n\t\t\t\t\t<line\n\t\t\t\t\t\tkey={'z-bar'}\n\t\t\t\t\t\tx1={COORDINATE_CLOSEST_TO_CAMERA[0]}\n\t\t\t\t\t\ty1={COORDINATE_CLOSEST_TO_CAMERA[1]}\n\t\t\t\t\t\tx2={BORDER_NODES[5][0]}\n\t\t\t\t\t\ty2={BORDER_NODES[5][1]}\n\t\t\t\t\t\tstroke={innerStrokeCss}\n\t\t\t\t\t\tstrokeWidth={innerStrokeWidth}\n\t\t\t\t\t\tstrokeLinecap={strokeLinecap}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\n\t\t\t<polygon\n\t\t\t\tkey={'outline'}\n\t\t\t\tpoints={BORDER_NODES.map(c => c.join(',')).join(' ')}\n\t\t\t\tstroke={strokeCss}\n\t\t\t\tfill={'transparent'}\n\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\tstrokeLinecap={strokeLinecap}\n\t\t\t/>\n\t\t</>\n\t);\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { CoordArray, PERSPECTIVE } from '../PERSPECTIVE';\n\nconst BORDER_WIDTH = 1;\nconst BORDER_NODES: CoordArray[] = [\n\t[1, 0, 0],\n\t[1, 1, 0],\n\t[0, 1, 0],\n\t[0, 0, 0]\n];\n\nlet spatialCoordinates = BORDER_NODES.map(coordinate =>\n\tPERSPECTIVE.toPixels(...coordinate)\n).map(cc => cc.map(c => c + BORDER_WIDTH));\n\nexport const MonochromeTile: FunctionComponent<\n\t{} & React.SVGProps<SVGPolygonElement>\n> = ({\n\tstroke = 'black',\n\tfill = 'rgba(100,100,160,0.8)',\n\tstrokeWidth = BORDER_WIDTH,\n\t...rest\n}) => {\n\treturn (\n\t\t<polygon\n\t\t\tpoints={spatialCoordinates.map(c => c.join(',')).join(' ')}\n\t\t\tstroke={stroke}\n\t\t\tfill={fill}\n\t\t\tstrokeWidth={strokeWidth}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n","/** @jsxImportSource @emotion/react */\n\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport { Anchor, Container, MonochromeBox } from './isometric';\n\nconst AppHeader = styled.header`\n\tbackground-color: #282c34;\n\tmin-height: 100vh;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n\tfont-size: calc(10px + 2vmin);\n\tcolor: white;\n\n\ta {\n\t\tcolor: #61dafb;\n\t}\n`;\n\nfunction App() {\n\treturn (\n\t\t<AppHeader>\n\t\t\t<p>Heyyoo</p>\n\t\t\t<Container>\n\t\t\t\t<Anchor x={0} y={0} z={0}>\n\t\t\t\t\t<MonochromeBox />\n\t\t\t\t</Anchor>\n\t\t\t\t<Anchor x={-1} y={-1} z={-1}>\n\t\t\t\t\t<MonochromeBox />\n\t\t\t\t</Anchor>\n\t\t\t</Container>\n\t\t</AppHeader>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(\n\t\t\t({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\t\tgetCLS(onPerfEntry);\n\t\t\t\tgetFID(onPerfEntry);\n\t\t\t\tgetFCP(onPerfEntry);\n\t\t\t\tgetLCP(onPerfEntry);\n\t\t\t\tgetTTFB(onPerfEntry);\n\t\t\t}\n\t\t);\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Global, css } from '@emotion/react';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst styles = css`\n\tbody {\n\t\tmargin: 0;\n\t\tfont-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n\t\t\t'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n\t\t\t'Helvetica Neue', sans-serif;\n\t\t-webkit-font-smoothing: antialiased;\n\t\t-moz-osx-font-smoothing: grayscale;\n\t}\n\n\tcode {\n\t\tfont-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n\t\t\tmonospace;\n\t}\n`;\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Global styles={styles} />\n\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}
{"version":3,"sources":["isometric/PERSPECTIVE.ts","isometric/objects/LinePath.tsx","isometric/3d/Anchor.tsx","isometric/3d/Container.tsx","isometric/3d/Coordinate.ts","isometric/objects/MonochromeBox.tsx","isometric/objects/MonochromeTile.tsx","scene/Scene.ts","scene/HelloWorld.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PERSPECTIVE","degrees","tileSize","isometricAngle","Math","PI","_isometricCos","cos","_isometricSin","sin","_isometricTan","tan","tileHeight","radians","toPixels","x","y","z","toCoords","cartX","cartY","isoY","createPerspective","sortCoordinatesByCameraDistance","a","b","dX","dY","dZ","LinePath","path","stroke","strokeWidth","spatialCoordinates","map","coordinate","cc","c","reduce","lines","start","i","all","concat","x1","y1","x2","y2","String","Crosshair","size","points","Anchor","children","crosshairSize","pixels","useMemo","overflow","SVG","styled","svg","Container","viewportCenterCoordinate","rest","viewportOffset","width","height","viewBox","join","shapeRendering","Coordinate","this","coord","dx","dy","dz","abs","coordsToPixels","coords","borderWidth","COORDINATE_CLOSEST_TO_CAMERA","BORDER_NODES","XZ_NODES","YZ_NODES","XY_NODES","MonochromeBox","fill","Color","strokeLinecap","darken","saturate","innerStroke","lighten","desaturate","innerStrokeWidth","gProps","innerStrokeCss","string","strokeCss","RandomScene","terrain","Array","from","_","floor","_terrain","slice","sort","getCenterTopCoordinateOfBox","clone","transform","HelloWorldScene","scene","useState","focusedCoord","setFocusedCoord","onClick","e","preventDefault","stopPropagation","console","log","toString","AppHeader","header","CrossH","div","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","styles","css","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.918df4f6.chunk.js","sourcesContent":["import { CoordinateLike } from './3d/Coordinate';\n//     z+\n//     |     y+\n//     |    /\n//     |  /\n//     |/\n// 0,0  \\\n//        \\\n//          \\ x+\n\nconst BASE_LENGTH = 32;\n\nexport type CoordValue = number;\nexport type Length = number;\nexport type Angle = number;\nexport type CoordArray = [CoordValue, CoordValue, CoordValue];\nexport type CoordObject = { x: CoordValue; y: CoordValue; z: CoordValue };\n\nfunction createPerspective(degrees: Angle, tileSize: Length) {\n\tconst isometricAngle = degrees * (Math.PI / 180);\n\tconst _isometricCos = Math.cos(isometricAngle);\n\tconst _isometricSin = Math.sin(isometricAngle);\n\tconst _isometricTan = Math.tan(isometricAngle);\n\n\t// const _isometricDist = Math.sqrt(Math.pow(_isometricCos, 2) + Math.pow(_isometricSin, 2)); // pythagoras\n\n\tconst tileHeight = tileSize;\n\n\treturn {\n\t\tdegrees: degrees,\n\t\tradians: degrees * (Math.PI / 180),\n\t\ttileSize: tileSize,\n\t\ttoPixels: (x: CoordValue, y: CoordValue, z: CoordValue) => {\n\t\t\tconst cartX = (x + y) * _isometricCos,\n\t\t\t\tcartY = (x - y) * _isometricSin;\n\n\t\t\treturn [\n\t\t\t\tcartX * tileSize, // x\n\t\t\t\tcartY * tileSize - tileHeight * z // y\n\t\t\t];\n\t\t},\n\t\ttoCoords: (cartX: CoordValue, cartY: CoordValue) => {\n\t\t\tconst isoY = _isometricTan * cartX + cartY,\n\t\t\t\tisoX = (cartY - isoY) / -_isometricSin - isoY;\n\n\t\t\t// this is good so far, b should be rescaled for tile size. as\n\t\t\treturn [isoX / tileSize, isoY / tileSize];\n\t\t}\n\t};\n}\n\nexport const PERSPECTIVE = createPerspective(30, BASE_LENGTH);\n\nexport function sortCoordinatesByCameraDistance(\n\ta: CoordinateLike,\n\tb: CoordinateLike\n) {\n\tconst dX = b.x - a.x;\n\tif (dX) {\n\t\treturn -dX;\n\t}\n\n\tconst dY = a.y - b.y;\n\tif (dY) {\n\t\treturn -dY;\n\t}\n\tconst dZ = b.z - a.z;\n\tif (dZ) {\n\t\treturn -dZ;\n\t}\n\treturn 0;\n}\n","import React, { FunctionComponent, ReactElement } from 'react';\n\nimport { CoordArray, PERSPECTIVE } from '../PERSPECTIVE';\n\nconst BORDER_WIDTH = 0;\n\nexport const LinePath: FunctionComponent<\n\tOmit<React.SVGProps<SVGLineElement>, 'path'> & {\n\t\tpath: CoordArray[];\n\t}\n> = ({ path, stroke = 'black', strokeWidth = BORDER_WIDTH }) => {\n\tlet spatialCoordinates = path\n\t\t.map(coordinate => PERSPECTIVE.toPixels(...coordinate))\n\t\t.map(cc => cc.map(c => c + BORDER_WIDTH));\n\n\treturn (\n\t\t<>\n\t\t\t{spatialCoordinates.reduce<ReactElement[]>(\n\t\t\t\t(lines, start, i, all) =>\n\t\t\t\t\ti\n\t\t\t\t\t\t? lines.concat([\n\t\t\t\t\t\t\t\t<line\n\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\tx1={start[0]}\n\t\t\t\t\t\t\t\t\ty1={start[1]}\n\t\t\t\t\t\t\t\t\tx2={all[i - 1][0]}\n\t\t\t\t\t\t\t\t\ty2={all[i - 1][1]}\n\t\t\t\t\t\t\t\t\tstroke={stroke}\n\t\t\t\t\t\t\t\t\tstrokeWidth={String(strokeWidth)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t  ])\n\t\t\t\t\t\t: lines,\n\t\t\t\t[]\n\t\t\t)}\n\t\t</>\n\t);\n};\n","import React, { FunctionComponent, useMemo } from 'react';\n\nimport { CoordArray, CoordObject, Length, PERSPECTIVE } from '../PERSPECTIVE';\nimport { LinePath } from '../objects/LinePath';\nimport { CoordinateLike } from './Coordinate';\n\nconst Crosshair: FunctionComponent<{ size: Length }> = ({ size = 4 }) => {\n\tconst lines: CoordArray[][] = [\n\t\t[\n\t\t\t// over the x axis\n\t\t\t[-1 * size, 0, 0],\n\t\t\t[size, 0, 0]\n\t\t],\n\t\t[\n\t\t\t// over the y axis\n\t\t\t[0, -1 * size, 0],\n\t\t\t[0, size, 0]\n\t\t],\n\t\t[\n\t\t\t// over the z axis\n\t\t\t[0, 0, -1 * size],\n\t\t\t[0, 0, size]\n\t\t]\n\t];\n\n\treturn (\n\t\t<>\n\t\t\t{lines.map((points, i) => (\n\t\t\t\t<LinePath\n\t\t\t\t\tkey={i}\n\t\t\t\t\tpath={points}\n\t\t\t\t\tstroke={'rgba(0,0,0)'}\n\t\t\t\t\tstrokeWidth={0.5}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</>\n\t);\n};\n\nexport const Anchor: FunctionComponent<\n\t{\n\t\tcrosshairSize?: Length;\n\t} & CoordinateLike\n> = ({ x = 0, y = 0, z = 0, children, crosshairSize = 0 }) => {\n\tconst pixels = useMemo(() => PERSPECTIVE.toPixels(x, y, z), [x, y, z]);\n\n\treturn (\n\t\t<svg x={pixels[0]} y={pixels[1]} overflow={'visible'}>\n\t\t\t{crosshairSize ? <Crosshair size={crosshairSize} /> : null}\n\t\t\t{children}\n\t\t</svg>\n\t);\n};\n","import React, { FunctionComponent, useMemo } from 'react';\n\nimport styled from '@emotion/styled';\n\nimport { PERSPECTIVE } from '../PERSPECTIVE';\nimport { CoordinateLike } from './Coordinate';\n\nexport const SVG = styled.svg`\n\tposition: absolute;\n\tleft: 50%;\n\ttop: 50%;\n`;\n\nexport const Container: FunctionComponent<\n\t{\n\t\tviewportCenterCoordinate?: CoordinateLike;\n\t} & React.SVGProps<SVGSVGElement>\n> = ({ viewportCenterCoordinate, children, ...rest }) => {\n\tconst viewportOffset = useMemo(\n\t\t() =>\n\t\t\tPERSPECTIVE.toPixels(\n\t\t\t\tviewportCenterCoordinate?.x || 0,\n\t\t\t\tviewportCenterCoordinate?.y || 0,\n\t\t\t\tviewportCenterCoordinate?.z || 0\n\t\t\t),\n\t\t[viewportCenterCoordinate]\n\t);\n\treturn (\n\t\t<SVG\n\t\t\t// svg and viewbox\n\t\t\twidth={'1px'}\n\t\t\theight={'1px'}\n\t\t\tviewBox={[...viewportOffset, 1, 1].join(' ')}\n\t\t\toverflow={'visible'}\n\t\t\t// svg rendering\n\t\t\tshapeRendering={'geometricPrecision'}\n\t\t\t{...rest}\n\t\t>\n\t\t\t{children}\n\t\t</SVG>\n\t);\n};\n","import { CoordObject, CoordValue, Length } from '../PERSPECTIVE';\nexport interface CoordinateLike {\n\tx: CoordValue;\n\ty: CoordValue;\n\tz: CoordValue;\n}\n\nexport class Coordinate implements CoordinateLike {\n\tx: CoordValue;\n\ty: CoordValue;\n\tz: CoordValue;\n\tconstructor(x: CoordValue, y: CoordValue, z: CoordValue) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t}\n\n\tclone() {\n\t\treturn new Coordinate(this.x, this.y, this.z);\n\t}\n\n\tequals(coord: CoordinateLike) {\n\t\treturn (\n\t\t\tthis === coord ||\n\t\t\t(coord &&\n\t\t\t\tthis.x === coord.x &&\n\t\t\t\tthis.y === coord.y &&\n\t\t\t\tthis.z === coord.z)\n\t\t);\n\t}\n\n\ttransform(dx: Length = 0, dy: Length = 0, dz: Length = 0) {\n\t\tthis.x += dx;\n\t\tthis.y += dy;\n\t\tthis.z += dz;\n\n\t\treturn this;\n\t}\n\n\tmanhattanDistanceTo(coord: CoordinateLike) {\n\t\treturn Math.abs(this.x - coord.x) + Math.abs(this.y - coord.y); // + Math.abs(this.z - coord.z);\n\t}\n\n\t// For debugging purposes only, may change without notice or tests\n\ttoString() {\n\t\treturn [this.x, this.y, this.z].join(',');\n\t}\n}\n","import Color from 'color';\nimport React, { FunctionComponent } from 'react';\n\nimport { CoordArray, Length, PERSPECTIVE } from '../PERSPECTIVE';\n\nconst BORDER_WIDTH = 0;\n\nfunction coordsToPixels(coords: CoordArray[], borderWidth = BORDER_WIDTH) {\n\treturn coords\n\t\t.map(coordinate => PERSPECTIVE.toPixels(...coordinate))\n\t\t.map(cc => cc.map(c => c + borderWidth));\n}\n\nconst COORDINATE_CLOSEST_TO_CAMERA = PERSPECTIVE.toPixels(1, 0, 1).map(\n\tc => c + BORDER_WIDTH\n);\n\nlet BORDER_NODES = coordsToPixels([\n\t[1, 1, 0], // 0\n\t[1, 1, 1],\n\t[0, 1, 1], // 2\n\t[0, 0, 1],\n\t[0, 0, 0], // 4\n\t[1, 0, 0]\n]);\n\n// facing to the bottom left, aka -y\nlet XZ_NODES = coordsToPixels([\n\t[0, 0, 0],\n\t[0, 0, 1],\n\t[1, 0, 1],\n\t[1, 0, 0]\n]);\n\n// facing to the bottom right, aka +x\nlet YZ_NODES = coordsToPixels([\n\t[1, 0, 0],\n\t[1, 1, 0],\n\t[1, 1, 1],\n\t[1, 0, 1]\n]);\n\n// facing top, aka +z\nlet XY_NODES = coordsToPixels([\n\t[0, 0, 1],\n\t[1, 0, 1],\n\t[1, 1, 1],\n\t[0, 1, 1]\n]);\n\nexport const MonochromeBox: FunctionComponent<\n\t{\n\t\tstrokeLinecap?: 'round' | 'butt' | 'square' | 'inherit' | undefined;\n\t\tfill?: Color;\n\t\tstrokeWidth?: Length;\n\t\tinnerStrokeWidth?: Length;\n\t\tstroke?: Color;\n\t\tinnerStroke?: Color;\n\t} & Pick<React.SVGProps<SVGGElement>, 'onClick'>\n> = ({\n\tfill = Color('gray'),\n\n\tstrokeLinecap = 'round',\n\n\tstroke = fill.darken(0.3).saturate(0.3),\n\tstrokeWidth = 1,\n\n\tinnerStroke = fill.lighten(0.4).desaturate(0.8),\n\tinnerStrokeWidth = strokeWidth,\n\t...gProps\n}) => {\n\tconst innerStrokeCss = innerStroke && innerStroke.string();\n\tconst strokeCss = stroke && stroke.string();\n\n\treturn (\n\t\t<g {...gProps}>\n\t\t\t{fill && (\n\t\t\t\t<>\n\t\t\t\t\t<polygon\n\t\t\t\t\t\tkey={'xz'}\n\t\t\t\t\t\tpoints={XZ_NODES.map(c => c.join(',')).join(' ')}\n\t\t\t\t\t\tfill={fill.string()}\n\t\t\t\t\t\tstrokeWidth={0}\n\t\t\t\t\t/>\n\t\t\t\t\t<polygon\n\t\t\t\t\t\tkey={'xy'}\n\t\t\t\t\t\tpoints={XY_NODES.map(c => c.join(',')).join(' ')}\n\t\t\t\t\t\tfill={fill.lighten(0.2).string()}\n\t\t\t\t\t\tstrokeWidth={0}\n\t\t\t\t\t/>\n\t\t\t\t\t<polygon\n\t\t\t\t\t\tkey={'yz'}\n\t\t\t\t\t\tpoints={YZ_NODES.map(c => c.join(',')).join(' ')}\n\t\t\t\t\t\tfill={fill.darken(0.2).string()}\n\t\t\t\t\t\tstrokeWidth={0}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{innerStroke && (\n\t\t\t\t<>\n\t\t\t\t\t<line\n\t\t\t\t\t\tkey={'x-bar'}\n\t\t\t\t\t\tx1={COORDINATE_CLOSEST_TO_CAMERA[0]}\n\t\t\t\t\t\ty1={COORDINATE_CLOSEST_TO_CAMERA[1]}\n\t\t\t\t\t\tx2={BORDER_NODES[3][0]}\n\t\t\t\t\t\ty2={BORDER_NODES[3][1]}\n\t\t\t\t\t\tstroke={innerStrokeCss}\n\t\t\t\t\t\tstrokeWidth={innerStrokeWidth}\n\t\t\t\t\t\tstrokeLinecap={strokeLinecap}\n\t\t\t\t\t/>\n\t\t\t\t\t<line\n\t\t\t\t\t\tkey={'y-bar'}\n\t\t\t\t\t\tx1={COORDINATE_CLOSEST_TO_CAMERA[0]}\n\t\t\t\t\t\ty1={COORDINATE_CLOSEST_TO_CAMERA[1]}\n\t\t\t\t\t\tx2={BORDER_NODES[1][0]}\n\t\t\t\t\t\ty2={BORDER_NODES[1][1]}\n\t\t\t\t\t\tstroke={innerStrokeCss}\n\t\t\t\t\t\tstrokeWidth={innerStrokeWidth}\n\t\t\t\t\t\tstrokeLinecap={strokeLinecap}\n\t\t\t\t\t/>\n\t\t\t\t\t<line\n\t\t\t\t\t\tkey={'z-bar'}\n\t\t\t\t\t\tx1={COORDINATE_CLOSEST_TO_CAMERA[0]}\n\t\t\t\t\t\ty1={COORDINATE_CLOSEST_TO_CAMERA[1]}\n\t\t\t\t\t\tx2={BORDER_NODES[5][0]}\n\t\t\t\t\t\ty2={BORDER_NODES[5][1]}\n\t\t\t\t\t\tstroke={innerStrokeCss}\n\t\t\t\t\t\tstrokeWidth={innerStrokeWidth}\n\t\t\t\t\t\tstrokeLinecap={strokeLinecap}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\n\t\t\t<polygon\n\t\t\t\tkey={'outline'}\n\t\t\t\tpoints={BORDER_NODES.map(c => c.join(',')).join(' ')}\n\t\t\t\tstroke={strokeCss}\n\t\t\t\tfill={'transparent'}\n\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\tstrokeLinecap={strokeLinecap}\n\t\t\t/>\n\t\t</g>\n\t);\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { CoordArray, PERSPECTIVE } from '../PERSPECTIVE';\n\nconst BORDER_WIDTH = 1;\nconst BORDER_NODES: CoordArray[] = [\n\t[1, 0, 0],\n\t[1, 1, 0],\n\t[0, 1, 0],\n\t[0, 0, 0]\n];\n\nlet spatialCoordinates = BORDER_NODES.map(coordinate =>\n\tPERSPECTIVE.toPixels(...coordinate)\n).map(cc => cc.map(c => c + BORDER_WIDTH));\n\nexport const MonochromeTile: FunctionComponent<\n\t{} & React.SVGProps<SVGPolygonElement>\n> = ({\n\tstroke = 'black',\n\tfill = 'rgba(100,100,160,0.8)',\n\tstrokeWidth = BORDER_WIDTH,\n\t...rest\n}) => {\n\treturn (\n\t\t<polygon\n\t\t\tpoints={spatialCoordinates.map(c => c.join(',')).join(' ')}\n\t\t\tstroke={stroke}\n\t\t\tfill={fill}\n\t\t\tstrokeWidth={strokeWidth}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n","import { Coordinate } from '../isometric';\nimport { sortCoordinatesByCameraDistance } from '../isometric/PERSPECTIVE';\n\nexport class Scene {\n\tprivate _terrain: Coordinate[] = [];\n\tset terrain(coords: Coordinate[]) {\n\t\tthis._terrain = coords.slice().sort(sortCoordinatesByCameraDistance);\n\t}\n\tget terrain() {\n\t\treturn this._terrain;\n\t}\n}\n\nexport class RandomScene extends Scene {\n\tconstructor(width: number, height: number) {\n\t\tsuper();\n\t\tthis.terrain = Array.from(new Array(width * height)).map(\n\t\t\t(_, i) =>\n\t\t\t\tnew Coordinate(\n\t\t\t\t\ti % width,\n\t\t\t\t\tMath.floor(i / width),\n\t\t\t\t\t0 //Math.random()\n\t\t\t\t)\n\t\t);\n\t}\n}\n","import { FunctionComponent, useMemo, useState } from 'react';\n\nimport { Anchor, Container, Coordinate, MonochromeBox } from '../isometric';\nimport { RandomScene } from './Scene';\n\nfunction getCenterTopCoordinateOfBox(coord: Coordinate) {\n\treturn coord.clone().transform(0.5, 0.5, 1);\n}\n\nexport const HelloWorldScene: FunctionComponent = () => {\n\tconst scene = useMemo(() => new RandomScene(13, 13), []);\n\tconst [focusedCoord, setFocusedCoord] = useState(\n\t\tgetCenterTopCoordinateOfBox(new Coordinate(6, 6, 0))\n\t);\n\tconst x = useMemo(\n\t\t() =>\n\t\t\tscene.terrain.map(coord => (\n\t\t\t\t<Anchor\n\t\t\t\t\tkey={coord.toString()}\n\t\t\t\t\tx={coord.x}\n\t\t\t\t\ty={coord.y}\n\t\t\t\t\tz={coord.z}\n\t\t\t\t>\n\t\t\t\t\t<MonochromeBox\n\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\tconsole.log('Clicck', coord, scene);\n\t\t\t\t\t\t\tsetFocusedCoord(getCenterTopCoordinateOfBox(coord));\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</Anchor>\n\t\t\t)),\n\t\t[]\n\t);\n\treturn <Container viewportCenterCoordinate={focusedCoord}>{x}</Container>;\n};\n","/** @jsxImportSource @emotion/react */\n\nimport styled from '@emotion/styled';\n\nimport { HelloWorldScene } from './scene/HelloWorld';\n\nconst AppHeader = styled.header`\n\tbackground-color: #282c34;\n\tmin-height: 100vh;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n\tfont-size: calc(10px + 2vmin);\n\tcolor: white;\n\n\ta {\n\t\tcolor: #61dafb;\n\t}\n`;\nconst CrossH = styled.div`\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\twidth: 10px;\n\theight: 10px;\n\tborder-top: 1px solid red;\n\tborder-left: 1px solid blue;\n\tz-index: 9999;\n`;\nfunction App() {\n\treturn (\n\t\t<AppHeader>\n\t\t\t<HelloWorldScene />\n\t\t\t<CrossH />\n\t\t</AppHeader>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(\n\t\t\t({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\t\tgetCLS(onPerfEntry);\n\t\t\t\tgetFID(onPerfEntry);\n\t\t\t\tgetFCP(onPerfEntry);\n\t\t\t\tgetLCP(onPerfEntry);\n\t\t\t\tgetTTFB(onPerfEntry);\n\t\t\t}\n\t\t);\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Global, css } from '@emotion/react';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst styles = css`\n\tbody {\n\t\tmargin: 0;\n\t\tfont-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n\t\t\t'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n\t\t\t'Helvetica Neue', sans-serif;\n\t\t-webkit-font-smoothing: antialiased;\n\t\t-moz-osx-font-smoothing: grayscale;\n\t}\n\n\tcode {\n\t\tfont-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n\t\t\tmonospace;\n\t}\n`;\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Global styles={styles} />\n\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}
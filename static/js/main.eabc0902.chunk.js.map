{"version":3,"sources":["space/PERSPECTIVE.ts","space/LinePath.tsx","space/Anchor.tsx","space/MonochromeBox.tsx","space/Viewport.tsx","demos/scaffolding.tsx","demos/demo.cubes.tsx","space/Coordinate.ts","space/MonochromeTile.tsx","entities/WorkerEntity.tsx","entities/Entity.ts","vendor/terrain.ts","scene/Scene.ts","ui/ActiveEntityOverlay.tsx","demos/scene.hello-world.tsx","App.tsx","textures/nebula-282c34.png","styles.ts","index.tsx"],"names":["PERSPECTIVE","degrees","tileSize","isometricAngle","Math","PI","_isometricCos","cos","_isometricSin","sin","_isometricTan","tan","tileHeight","radians","toPixels","x","y","z","toCoords","cartX","cartY","isoY","createPerspective","distanceToCameraComparator","a","b","dX","dY","dZ","LinePath","path","stroke","strokeWidth","spatialCoordinates","map","coordinate","cc","c","reduce","lines","start","i","all","concat","x1","y1","x2","y2","String","Crosshair","size","points","Anchor","children","crosshairSize","pixels","useMemo","overflow","coordsToPixels","coords","borderWidth","COORDINATE_CLOSEST_TO_CAMERA","BORDER_NODES","XZ_NODES","YZ_NODES","XY_NODES","MonochromeBox","fill","Color","strokeLinecap","darken","saturate","innerStroke","lighten","desaturate","innerStrokeWidth","gProps","innerStrokeCss","string","strokeCss","style","onClick","onContextMenu","cursor","join","PIXEL_FRIENDLY_PYTHAGORAS","pow","mathRoundMaybe","n","round","AbsolutelyPositionedContainer","styled","div","Viewport","overlay","center","zoom","translateX","translateY","springStyles","transform","ViewportSvgContainer","rest","width","height","shapeRendering","viewBox","NoAxis","Backdrop","sqrt","Demo","window","alert","Coordinate","this","coord","dx","dy","dz","abs","MonochromeTile","WorkerEntity","Component","clone","location","id","average","values","valid","filter","val","sum","length","Terrain","detail","max","Float32Array","roughness","half","scale","square","random","diamond","divide","offset","ave","get","set","RandomScene","terrain","generate","Array","from","_","floor","entities","xy","terrainIndex","ActiveEntityOverlayWrapper","section","ActiveEntityOverlay","HelloWorldSceneTerrain","monochromeBoxProps","useState","isHovered","setIsHovered","translated","undefined","onMouseEnter","onMouseLeave","toString","scene","centerIndex","centerCoord","setCenterCoord","slice","sort","event","preventDefault","entity","Demos","to","exact","component","DemoCubes","App","SceneHelloWorld","styles","css","nebulaTexture","ReactDOM","render","StrictMode","globalStyleRules","hashType","document","getElementById"],"mappings":"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","file":"static/js/main.eabc0902.chunk.js","sourcesContent":["import { CoordinateLike } from './Coordinate';\n//     z+\n//     |     y+\n//     |    /\n//     |  /\n//     |/\n// 0,0  \\\n//        \\\n//          \\ x+\n\nconst BASE_LENGTH = 24;\n\nexport type CoordValue = number;\nexport type Length = number;\nexport type Angle = number;\nexport type CoordArray = [CoordValue, CoordValue, CoordValue];\nexport type CoordObject = { x: CoordValue; y: CoordValue; z: CoordValue };\n\nfunction createPerspective(degrees: Angle, tileSize: Length) {\n\tconst isometricAngle = degrees * (Math.PI / 180);\n\tconst _isometricCos = Math.cos(isometricAngle);\n\tconst _isometricSin = Math.sin(isometricAngle);\n\tconst _isometricTan = Math.tan(isometricAngle);\n\n\tconst tileHeight = tileSize;\n\n\treturn {\n\t\tdegrees: degrees,\n\t\tradians: degrees * (Math.PI / 180),\n\t\ttileSize: tileSize,\n\t\ttoPixels: (x: CoordValue, y: CoordValue, z: CoordValue) => {\n\t\t\tconst cartX = (x + y) * _isometricCos,\n\t\t\t\tcartY = (x - y) * _isometricSin;\n\n\t\t\treturn [\n\t\t\t\tcartX * tileSize, // x\n\t\t\t\tcartY * tileSize - tileHeight * z // y\n\t\t\t];\n\t\t},\n\t\ttoCoords: (cartX: CoordValue, cartY: CoordValue) => {\n\t\t\tconst isoY = _isometricTan * cartX + cartY,\n\t\t\t\tisoX = (cartY - isoY) / -_isometricSin - isoY;\n\n\t\t\t// this is good so far, b should be rescaled for tile size. as\n\t\t\treturn [isoX / tileSize, isoY / tileSize];\n\t\t}\n\t};\n}\n\nexport const PERSPECTIVE = createPerspective(30, BASE_LENGTH);\n\nexport function randomComparator() {\n\treturn 0.5 - Math.random();\n}\n\nexport function distanceToCameraComparator(a: CoordinateLike, b: CoordinateLike) {\n\tconst dX = b.x - a.x;\n\tif (dX) {\n\t\treturn -dX;\n\t}\n\n\tconst dY = a.y - b.y;\n\tif (dY) {\n\t\treturn -dY;\n\t}\n\tconst dZ = b.z - a.z;\n\tif (dZ) {\n\t\treturn -dZ;\n\t}\n\treturn 0;\n}\n","import React, { FunctionComponent, ReactElement } from 'react';\n\nimport { CoordArray, PERSPECTIVE } from './PERSPECTIVE';\n\nconst BORDER_WIDTH = 0;\n\nexport const LinePath: FunctionComponent<\n\tOmit<React.SVGProps<SVGLineElement>, 'path'> & {\n\t\tpath: CoordArray[];\n\t}\n> = ({ path, stroke = 'black', strokeWidth = BORDER_WIDTH }) => {\n\tlet spatialCoordinates = path\n\t\t.map(coordinate => PERSPECTIVE.toPixels(...coordinate))\n\t\t.map(cc => cc.map(c => c + BORDER_WIDTH));\n\n\treturn (\n\t\t<>\n\t\t\t{spatialCoordinates.reduce<ReactElement[]>(\n\t\t\t\t(lines, start, i, all) =>\n\t\t\t\t\ti\n\t\t\t\t\t\t? lines.concat([\n\t\t\t\t\t\t\t\t<line\n\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\tx1={start[0]}\n\t\t\t\t\t\t\t\t\ty1={start[1]}\n\t\t\t\t\t\t\t\t\tx2={all[i - 1][0]}\n\t\t\t\t\t\t\t\t\ty2={all[i - 1][1]}\n\t\t\t\t\t\t\t\t\tstroke={stroke}\n\t\t\t\t\t\t\t\t\tstrokeWidth={String(strokeWidth)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t  ])\n\t\t\t\t\t\t: lines,\n\t\t\t\t[]\n\t\t\t)}\n\t\t</>\n\t);\n};\n","import { useSpring } from '@react-spring/core';\nimport { animated } from '@react-spring/web';\nimport React, { FunctionComponent, useMemo } from 'react';\nimport { CoordinateLike } from './Coordinate';\nimport { LinePath } from './LinePath';\nimport { CoordArray, Length, PERSPECTIVE } from './PERSPECTIVE';\n\nconst Crosshair: FunctionComponent<{ size: Length }> = ({ size = 4 }) => {\n\tconst lines: CoordArray[][] = [\n\t\t[\n\t\t\t// over the x axis\n\t\t\t[-1 * size, 0, 0],\n\t\t\t[size, 0, 0]\n\t\t],\n\t\t[\n\t\t\t// over the y axis\n\t\t\t[0, -1 * size, 0],\n\t\t\t[0, size, 0]\n\t\t],\n\t\t[\n\t\t\t// over the z axis\n\t\t\t[0, 0, -1 * size],\n\t\t\t[0, 0, size]\n\t\t]\n\t];\n\n\treturn (\n\t\t<>\n\t\t\t{lines.map((points, i) => (\n\t\t\t\t<LinePath key={i} path={points} stroke={'rgba(0,0,0)'} strokeWidth={0.5} />\n\t\t\t))}\n\t\t</>\n\t);\n};\n\nexport const Anchor: FunctionComponent<\n\t{\n\t\tcrosshairSize?: Length;\n\t} & Partial<CoordinateLike>\n> = ({ x = 0, y = 0, z = 0, children, crosshairSize = 0 }) => {\n\tconst pixels = useMemo(() => PERSPECTIVE.toPixels(x, y, z), [x, y, z]);\n\n\treturn (\n\t\t<svg x={pixels[0]} y={pixels[1]} overflow={'visible'}>\n\t\t\t{crosshairSize ? <Crosshair size={crosshairSize} /> : null}\n\t\t\t{children}\n\t\t</svg>\n\t);\n};\n\nexport const MovingAnchor: FunctionComponent<{\n\tmoveTo: CoordinateLike;\n\tcrosshairSize?: Length;\n}> = ({ moveTo, children, crosshairSize = 0 }) => {\n\tconst [dx, dy] = useMemo(() => PERSPECTIVE.toPixels(moveTo.x, moveTo.y, moveTo.z), [moveTo]);\n\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\tconst [ix, iy] = useMemo(() => [dx, dy], []);\n\n\tconst loc = useSpring({\n\t\tto: {\n\t\t\tx: dx,\n\t\t\ty: dy\n\t\t},\n\t\tconfig: {\n\t\t\tduration: 2500\n\t\t},\n\t\tfrom: {\n\t\t\tx: ix,\n\t\t\ty: iy\n\t\t}\n\t});\n\n\t// @TODO reuse <Anchor>\n\treturn (\n\t\t<animated.svg x={loc.x} y={loc.y} overflow={'visible'}>\n\t\t\t{crosshairSize ? <Crosshair size={crosshairSize} /> : null}\n\t\t\t{children}\n\t\t</animated.svg>\n\t);\n};\n","import Color from 'color';\nimport React, { FunctionComponent } from 'react';\nimport { CoordArray, Length, PERSPECTIVE } from './PERSPECTIVE';\n\nconst BORDER_WIDTH = 0;\n\nfunction coordsToPixels(coords: CoordArray[], borderWidth = BORDER_WIDTH) {\n\treturn coords\n\t\t.map(coordinate => PERSPECTIVE.toPixels(...coordinate))\n\t\t.map(cc => cc.map(c => c + borderWidth));\n}\n\nconst COORDINATE_CLOSEST_TO_CAMERA = PERSPECTIVE.toPixels(1, 0, 1).map(c => c + BORDER_WIDTH);\n\nlet BORDER_NODES = coordsToPixels([\n\t[1, 1, 0], // 0\n\t[1, 1, 1],\n\t[0, 1, 1], // 2\n\t[0, 0, 1],\n\t[0, 0, 0], // 4\n\t[1, 0, 0]\n]);\n\n// facing to the bottom left, aka -y\nlet XZ_NODES = coordsToPixels([\n\t[0, 0, 0],\n\t[0, 0, 1],\n\t[1, 0, 1],\n\t[1, 0, 0]\n]);\n\n// facing to the bottom right, aka +x\nlet YZ_NODES = coordsToPixels([\n\t[1, 0, 0],\n\t[1, 1, 0],\n\t[1, 1, 1],\n\t[1, 0, 1]\n]);\n\n// facing top, aka +z\nlet XY_NODES = coordsToPixels([\n\t[0, 0, 1],\n\t[1, 0, 1],\n\t[1, 1, 1],\n\t[0, 1, 1]\n]);\n\nexport const MonochromeBox: FunctionComponent<\n\t{\n\t\tstrokeLinecap?: 'round' | 'butt' | 'square' | 'inherit' | undefined;\n\t\tfill?: Color;\n\t\tstroke?: Color;\n\t\tstrokeWidth?: Length;\n\t\tinnerStrokeWidth?: Length;\n\t\tinnerStroke?: Color;\n\t} & Pick<\n\t\tReact.SVGProps<SVGGElement>,\n\t\t'onClick' | 'onContextMenu' | 'onMouseEnter' | 'onMouseLeave'\n\t>\n> = ({\n\tfill = Color('#282c34'),\n\tstrokeLinecap = 'round',\n\tstroke = fill.darken(0.3).saturate(0.3),\n\tstrokeWidth = 1,\n\tinnerStroke = fill.lighten(0.4).desaturate(0.8),\n\tinnerStrokeWidth = strokeWidth,\n\t...gProps\n}) => {\n\tconst innerStrokeCss = innerStroke && innerStroke.string();\n\tconst strokeCss = stroke && stroke.string();\n\n\tconst style: Record<string, string> = {};\n\tif (gProps.onClick || gProps.onContextMenu) {\n\t\tstyle.cursor = 'pointer';\n\t}\n\n\treturn (\n\t\t<g {...gProps} style={style}>\n\t\t\t{fill && (\n\t\t\t\t<>\n\t\t\t\t\t<polygon\n\t\t\t\t\t\tkey={'xz'}\n\t\t\t\t\t\tpoints={XZ_NODES.map(c => c.join(',')).join(' ')}\n\t\t\t\t\t\tfill={fill.string()}\n\t\t\t\t\t\tstrokeWidth={0}\n\t\t\t\t\t/>\n\t\t\t\t\t<polygon\n\t\t\t\t\t\tkey={'xy'}\n\t\t\t\t\t\tpoints={XY_NODES.map(c => c.join(',')).join(' ')}\n\t\t\t\t\t\tfill={fill.lighten(0.2).string()}\n\t\t\t\t\t\tstrokeWidth={0}\n\t\t\t\t\t/>\n\t\t\t\t\t<polygon\n\t\t\t\t\t\tkey={'yz'}\n\t\t\t\t\t\tpoints={YZ_NODES.map(c => c.join(',')).join(' ')}\n\t\t\t\t\t\tfill={fill.darken(0.2).string()}\n\t\t\t\t\t\tstrokeWidth={0}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{innerStroke && (\n\t\t\t\t<>\n\t\t\t\t\t<line\n\t\t\t\t\t\tkey={'x-bar'}\n\t\t\t\t\t\tx1={COORDINATE_CLOSEST_TO_CAMERA[0]}\n\t\t\t\t\t\ty1={COORDINATE_CLOSEST_TO_CAMERA[1]}\n\t\t\t\t\t\tx2={BORDER_NODES[3][0]}\n\t\t\t\t\t\ty2={BORDER_NODES[3][1]}\n\t\t\t\t\t\tstroke={innerStrokeCss}\n\t\t\t\t\t\tstrokeWidth={innerStrokeWidth}\n\t\t\t\t\t\tstrokeLinecap={strokeLinecap}\n\t\t\t\t\t/>\n\t\t\t\t\t<line\n\t\t\t\t\t\tkey={'y-bar'}\n\t\t\t\t\t\tx1={COORDINATE_CLOSEST_TO_CAMERA[0]}\n\t\t\t\t\t\ty1={COORDINATE_CLOSEST_TO_CAMERA[1]}\n\t\t\t\t\t\tx2={BORDER_NODES[1][0]}\n\t\t\t\t\t\ty2={BORDER_NODES[1][1]}\n\t\t\t\t\t\tstroke={innerStrokeCss}\n\t\t\t\t\t\tstrokeWidth={innerStrokeWidth}\n\t\t\t\t\t\tstrokeLinecap={strokeLinecap}\n\t\t\t\t\t/>\n\t\t\t\t\t<line\n\t\t\t\t\t\tkey={'z-bar'}\n\t\t\t\t\t\tx1={COORDINATE_CLOSEST_TO_CAMERA[0]}\n\t\t\t\t\t\ty1={COORDINATE_CLOSEST_TO_CAMERA[1]}\n\t\t\t\t\t\tx2={BORDER_NODES[5][0]}\n\t\t\t\t\t\ty2={BORDER_NODES[5][1]}\n\t\t\t\t\t\tstroke={innerStrokeCss}\n\t\t\t\t\t\tstrokeWidth={innerStrokeWidth}\n\t\t\t\t\t\tstrokeLinecap={strokeLinecap}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\n\t\t\t<polygon\n\t\t\t\tkey={'outline'}\n\t\t\t\tpoints={BORDER_NODES.map(c => c.join(',')).join(' ')}\n\t\t\t\tstroke={strokeCss}\n\t\t\t\tfill={'transparent'}\n\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\tstrokeLinecap={strokeLinecap}\n\t\t\t/>\n\t\t</g>\n\t);\n};\n","import styled from '@emotion/styled';\nimport React, { FunctionComponent, ReactElement, useMemo } from 'react';\nimport { AnimatedComponent } from 'react-spring';\nimport { CoordinateLike } from './Coordinate';\nimport { Length, PERSPECTIVE } from './PERSPECTIVE';\n\n// The pythagoras distance (1/sqrt(2)) with a little tweaking for better looks\nconst PIXEL_FRIENDLY_PYTHAGORAS = 1 / Math.pow(2, 1 / 2); //0.8;\n\nfunction mathRoundMaybe(n: number) {\n\t// For debugging only. Adjust to taste.\n\n\treturn Math.round(n);\n\t// return n;\n}\n\n// Force the type to AnimatedComponent to avoid a weird TS inference bug\n//\nexport const AbsolutelyPositionedContainer = styled.div`\n\tposition: absolute;\n\tleft: 50%;\n\ttop: 50%;\n\twidth: 0;\n\theight: 0;\n\ttransition: transform 0.5s;\n\t> * {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n` as unknown as AnimatedComponent<'div'>;\n\ntype ViewportComponentProps = {\n\tzoom?: number;\n\tcenter?: CoordinateLike;\n\toverlay?: ReactElement;\n};\n\nexport const Viewport: FunctionComponent<ViewportComponentProps> = ({\n\toverlay,\n\tcenter = { x: 0, y: 0, z: 0 },\n\tzoom = 1,\n\tchildren\n}) => {\n\tconst [translateX, translateY] = useMemo(\n\t\t() =>\n\t\t\tPERSPECTIVE.toPixels(center.x, center.y, center.z).map(\n\t\t\t\t(n, i) => mathRoundMaybe(-n) + (i ? 0 : 0.5)\n\t\t\t),\n\t\t[center]\n\t);\n\n\tconst springStyles =\n\t\t//useSpring({\n\t\t// \tconfig: config.molasses,\n\t\t// \tto:\n\t\t{\n\t\t\ttransform: `translate(\n\t\t\t\t${translateX * zoom}px,\n\t\t\t\t${translateY * zoom}px\n\t\t\t)`\n\t\t};\n\t// });\n\n\treturn (\n\t\t<AbsolutelyPositionedContainer style={springStyles}>\n\t\t\t<ViewportSvgContainer zoom={zoom} children={children} />\n\t\t\t{overlay}\n\t\t</AbsolutelyPositionedContainer>\n\t);\n};\n\nexport const ViewportSvgContainer: FunctionComponent<\n\t{\n\t\tzoom?: number;\n\t} & React.SVGProps<SVGSVGElement>\n> = ({ zoom = 1, ...rest }) => (\n\t<svg\n\t\twidth=\"1px\"\n\t\theight=\"1px\"\n\t\toverflow=\"visible\"\n\t\tshapeRendering=\"geometricPrecision\"\n\t\tviewBox={[0, 0, 1 / zoom, 1 / zoom].join(' ')}\n\t\t{...rest}\n\t/>\n);\n\nconst NoAxis = styled.div<{ zoom?: number }>`\n\t--scale-val: ${({ zoom = 1 }) => zoom};\n\n\tposition: absolute;\n\ttransform-origin: top left;\n\ttransform: scale(var(--scale-val));\n`;\n\nconst YAxis = styled(NoAxis)`\n\ttransform: skewY(-${PERSPECTIVE.degrees}deg)\n\t\tscale(calc(${PIXEL_FRIENDLY_PYTHAGORAS} * var(--scale-val)), var(--scale-val));\n`;\n\nconst ZAxis = styled(NoAxis)`\n\ttransform: rotate(-${PERSPECTIVE.degrees}deg) skewX(${PERSPECTIVE.degrees}deg)\n\t\tscale(\n\t\t\tcalc(${Math.sqrt(PIXEL_FRIENDLY_PYTHAGORAS)} * var(--scale-val)),\n\t\t\tcalc(${PIXEL_FRIENDLY_PYTHAGORAS} * var(--scale-val))\n\t\t);\n`;\n\nconst XAxis = styled(NoAxis)`\n\ttransform: skewY(${PERSPECTIVE.degrees}deg)\n\t\tscale(calc(${PIXEL_FRIENDLY_PYTHAGORAS} * var(--scale-val)), var(--scale-val));\n`;\n\nexport const ViewportHtmlContainer: FunctionComponent<{\n\taxis?: 'x' | 'y' | 'z';\n\twidth: Length;\n\theight: Length;\n\tzoom?: number;\n\tlocation: CoordinateLike;\n}> = ({ location, zoom = 1, axis, width, height, children }) => {\n\tconst { x, y, z } = location,\n\t\t// @TODO use css variable to zoom instead of JS\n\t\t[left, top] = PERSPECTIVE.toPixels(x, y, z).map(n => mathRoundMaybe(n * zoom));\n\t// @TODO use css variable to zoom instead of JS\n\tconst [pixelWidth] = PERSPECTIVE.toPixels(0, width, height).map(n => mathRoundMaybe(n * zoom));\n\tconst Axis = axis === 'y' ? YAxis : axis === 'x' ? XAxis : axis === 'z' ? ZAxis : NoAxis;\n\treturn (\n\t\t<Axis\n\t\t\tzoom={zoom}\n\t\t\tstyle={{\n\t\t\t\tleft: mathRoundMaybe(left),\n\t\t\t\ttop: mathRoundMaybe(top),\n\t\t\t\twidth:\n\t\t\t\t\tmathRoundMaybe(axis ? pixelWidth / PIXEL_FRIENDLY_PYTHAGORAS : pixelWidth) +\n\t\t\t\t\t'px',\n\t\t\t\theight:\n\t\t\t\t\tMath.abs(\n\t\t\t\t\t\t(height * PERSPECTIVE.tileSize) /\n\t\t\t\t\t\t\t(axis === 'z' ? PIXEL_FRIENDLY_PYTHAGORAS : 1)\n\t\t\t\t\t) + 'px'\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</Axis>\n\t);\n};\n","import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div<{ height?: number }>`\n\tposition: relative;\n\theight: ${({ height = 180 }) => `${height}px`};\n\tbackground-image: linear-gradient(\n\t\t45deg,\n\t\trgba(255, 255, 255, 0.02) 25%,\n\t\trgba(0, 0, 0, 0.02) 25%,\n\t\trgba(0, 0, 0, 0.02) 50%,\n\t\trgba(255, 255, 255, 0.02) 50%,\n\t\trgba(255, 255, 255, 0.02) 75%,\n\t\trgba(0, 0, 0, 0.02) 75%,\n\t\trgba(0, 0, 0, 0.02) 100%\n\t);\n\tbackground-size: 56.57px 56.57px;\n\tmargin-bottom: 1em;\n`;\n","import Color from 'color';\nimport { FunctionComponent } from 'react';\nimport { Anchor } from '../space/Anchor';\nimport { MonochromeBox } from '../space/MonochromeBox';\nimport { Viewport } from '../space/Viewport';\nimport { Backdrop } from './scaffolding';\n\nconst Demo: FunctionComponent = () => (\n\t<>\n\t\t<Backdrop>\n\t\t\t<Viewport zoom={1} center={{ x: 0.5, y: 0.5, z: 0.5 }}>\n\t\t\t\t<Anchor x={-2} y={-2} z={0}>\n\t\t\t\t\t<MonochromeBox />\n\t\t\t\t</Anchor>\n\t\t\t\t<Anchor x={0} y={0} z={0}>\n\t\t\t\t\t<MonochromeBox innerStroke={Color('#630a0a7d')} fill={Color('#960202')} />\n\t\t\t\t</Anchor>\n\t\t\t\t<Anchor x={2} y={2} z={0}>\n\t\t\t\t\t<MonochromeBox\n\t\t\t\t\t\tfill={Color('#ffffff7f')}\n\t\t\t\t\t\tonClick={() => window.alert('Clicky click!')}\n\t\t\t\t\t/>\n\t\t\t\t</Anchor>\n\t\t\t</Viewport>\n\t\t</Backdrop>\n\t\t<Backdrop>\n\t\t\t<Viewport center={{ x: 1, y: 0, z: 0.5 }}>\n\t\t\t\t<Anchor x={0} y={0} z={0}>\n\t\t\t\t\t<MonochromeBox />\n\t\t\t\t</Anchor>\n\t\t\t\t<Anchor x={1} y={0} z={0}>\n\t\t\t\t\t<MonochromeBox />\n\t\t\t\t</Anchor>\n\t\t\t\t<Anchor x={2} y={0} z={0}>\n\t\t\t\t\t<MonochromeBox />\n\t\t\t\t</Anchor>\n\t\t\t\t<Anchor x={2} y={-1} z={0}>\n\t\t\t\t\t<MonochromeBox />\n\t\t\t\t</Anchor>\n\t\t\t</Viewport>\n\t\t</Backdrop>\n\t</>\n);\nexport default Demo;\n","import { CoordValue, Length } from './PERSPECTIVE';\nexport interface CoordinateLike {\n\tx: CoordValue;\n\ty: CoordValue;\n\tz: CoordValue;\n}\n\nexport class Coordinate implements CoordinateLike {\n\tx: CoordValue;\n\ty: CoordValue;\n\tz: CoordValue;\n\tconstructor(x: CoordValue, y: CoordValue, z: CoordValue) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t}\n\n\tequals(coord: CoordinateLike) {\n\t\treturn (\n\t\t\tthis === coord ||\n\t\t\t(coord && this.x === coord.x && this.y === coord.y && this.z === coord.z)\n\t\t);\n\t}\n\n\ttransform(dx: Length = 0, dy: Length = 0, dz: Length = 0) {\n\t\tthis.x += dx;\n\t\tthis.y += dy;\n\t\tthis.z += dz;\n\n\t\treturn this;\n\t}\n\n\tmanhattanDistanceTo(coord: CoordinateLike) {\n\t\treturn Math.abs(this.x - coord.x) + Math.abs(this.y - coord.y); // + Math.abs(this.z - coord.z);\n\t}\n\n\t// For debugging purposes only, may change without notice or tests\n\ttoString() {\n\t\treturn [this.x, this.y, this.z].join(',');\n\t}\n\n\tstatic clone(coord: CoordinateLike) {\n\t\treturn new Coordinate(coord.x, coord.y, coord.z);\n\t}\n}\n","import Color from 'color';\nimport React, { FunctionComponent } from 'react';\n\nimport { CoordArray, PERSPECTIVE } from './PERSPECTIVE';\n\nconst BORDER_WIDTH = 1;\nconst BORDER_NODES: CoordArray[] = [\n\t[1, 0, 0],\n\t[1, 1, 0],\n\t[0, 1, 0],\n\t[0, 0, 0]\n];\n\nlet spatialCoordinates = BORDER_NODES.map(coordinate => PERSPECTIVE.toPixels(...coordinate)).map(\n\tcc => cc.map(c => c + BORDER_WIDTH)\n);\n\nexport const MonochromeTile: FunctionComponent<\n\t{\n\t\tzoom?: number;\n\t\tfill?: Color;\n\t\tstroke?: Color;\n\t} & React.SVGProps<SVGPolygonElement>\n> = ({\n\tfill = Color('#282c34'), //.lighten(0.3),\n\n\tstroke = fill.darken(0.3).saturate(0.3),\n\tstrokeWidth = BORDER_WIDTH,\n\tzoom = 1,\n\t...rest\n}) => {\n\treturn (\n\t\t<polygon\n\t\t\tpoints={spatialCoordinates.map(c => c.map(c => c * zoom).join(',')).join(' ')}\n\t\t\tstroke={stroke.string()}\n\t\t\tfill={fill.string()}\n\t\t\tstrokeWidth={strokeWidth}\n\t\t\t{...rest}\n\t\t/>\n\t);\n};\n","import React, { FunctionComponent } from 'react';\nimport { Anchor } from '../space/Anchor';\nimport { Coordinate } from '../space/Coordinate';\nimport { MonochromeTile } from '../space/MonochromeTile';\nimport { Entity } from './Entity';\n\nexport class WorkerEntity extends Entity {\n\tComponent: FunctionComponent = () => {\n\t\tconst zoom = 0.5;\n\n\t\tconst translate = zoom / 2;\n\t\treturn (\n\t\t\t<Anchor {...Coordinate.clone(this.location).transform(-translate, -translate, 0)}>\n\t\t\t\t<MonochromeTile zoom={zoom} />\n\t\t\t</Anchor>\n\t\t);\n\t\t// return <circle cx={x} cy={y} r=\"5\" fill=\"white\" />;\n\t};\n}\n","import { FunctionComponent } from 'react';\nimport { Coordinate } from '../space/Coordinate';\n\nexport class Entity {\n\tpublic readonly id: string;\n\tpublic readonly location: Coordinate;\n\tconstructor(id: string, location: Coordinate) {\n\t\tthis.id = id;\n\t\tthis.location = location;\n\t}\n\tpublic readonly Component: FunctionComponent = () => {\n\t\treturn null;\n\t};\n}\n","/**\n * Adapted from\n *   https://github.com/hunterloftis/playfuljs-demos/blob/gh-pages/terrain/index.html#L118\n */\n\nfunction average(values: number[]) {\n\tvar valid = values.filter(function (val) {\n\t\treturn val !== -1;\n\t});\n\tvar total = valid.reduce(function (sum, val) {\n\t\treturn sum + val;\n\t}, 0);\n\treturn total / valid.length;\n}\n\nexport class Terrain {\n\tsize: number;\n\tmax: number;\n\tmap: Float32Array;\n\n\tconstructor(detail: number) {\n\t\tthis.size = Math.pow(2, detail) + 1;\n\t\tthis.max = this.size - 1;\n\t\tthis.map = new Float32Array(this.size * this.size);\n\t}\n\n\tget(x: number, y: number) {\n\t\tif (x < 0 || x > this.max || y < 0 || y > this.max) {\n\t\t\t// Out of bounds\n\t\t\treturn -1;\n\t\t}\n\t\treturn this.map[x + this.size * y];\n\t}\n\n\tset(x: number, y: number, val: number) {\n\t\tthis.map[x + this.size * y] = val;\n\t}\n\n\tdivide(size: number, roughness: number) {\n\t\tvar x,\n\t\t\ty,\n\t\t\thalf = size / 2;\n\t\tvar scale = roughness * size;\n\t\tif (half < 1) return;\n\n\t\tfor (y = half; y < this.max; y += size) {\n\t\t\tfor (x = half; x < this.max; x += size) {\n\t\t\t\tthis.square(x, y, half, Math.random() * scale * 2 - scale);\n\t\t\t}\n\t\t}\n\t\tfor (y = 0; y <= this.max; y += half) {\n\t\t\tfor (x = (y + half) % size; x <= this.max; x += size) {\n\t\t\t\tthis.diamond(x, y, half, Math.random() * scale * 2 - scale);\n\t\t\t}\n\t\t}\n\t\tthis.divide(size / 2, roughness);\n\t}\n\n\tsquare(x: number, y: number, size: number, offset: number) {\n\t\tvar ave = average([\n\t\t\tthis.get(x - size, y - size), // upper left\n\t\t\tthis.get(x + size, y - size), // upper right\n\t\t\tthis.get(x + size, y + size), // lower right\n\t\t\tthis.get(x - size, y + size) // lower left\n\t\t]);\n\t\tthis.set(x, y, ave + offset);\n\t}\n\n\tdiamond(x: number, y: number, size: number, offset: number) {\n\t\tvar ave = average([\n\t\t\tthis.get(x, y - size), // top\n\t\t\tthis.get(x + size, y), // right\n\t\t\tthis.get(x, y + size), // bottom\n\t\t\tthis.get(x - size, y) // left\n\t\t]);\n\t\tthis.set(x, y, ave + offset);\n\t}\n\n\tgenerate(roughness: number) {\n\t\tthis.set(0, 0, this.max);\n\t\tthis.set(this.max, 0, this.max / 2);\n\t\tthis.set(this.max, this.max, 0);\n\t\tthis.set(0, this.max, this.max / 2);\n\n\t\tthis.divide(this.max, roughness);\n\t}\n}\n","import { Coordinate } from '../space/Coordinate';\nimport { Entity } from '../entities/Entity';\nimport { WorkerEntity } from '../entities/WorkerEntity';\nimport { Terrain } from '../vendor/terrain';\n\nexport class Scene {\n\tpublic terrain: Coordinate[] = [];\n\tpublic entities: Entity[] = [];\n}\n\nexport class RandomScene extends Scene {\n\tconstructor(width: number, height: number) {\n\t\tsuper();\n\n\t\tconst terrain = new Terrain(9);\n\t\tterrain.generate(1);\n\n\t\tthis.terrain = Array.from(new Array(width * height)).map((_, i) => {\n\t\t\tconst x = i % width;\n\t\t\tconst y = Math.floor(i / width);\n\t\t\tconst z = terrain.get(x, y);\n\t\t\treturn new Coordinate(x, y, (z - 512) / 20);\n\t\t});\n\t\tthis.entities = Array.from(new Array(100)).map((_, i) => {\n\t\t\tconst xy = {\n\t\t\t\tx: Math.floor(Math.random() * width),\n\t\t\t\ty: Math.floor(Math.random() * height)\n\t\t\t};\n\t\t\tconst terrainIndex = xy.y * width + xy.x;\n\t\t\treturn new WorkerEntity(\n\t\t\t\t'entity-' + i,\n\t\t\t\tCoordinate.clone({\n\t\t\t\t\t...xy,\n\t\t\t\t\tz: this.terrain[terrainIndex].z\n\t\t\t\t})\n\t\t\t);\n\t\t});\n\t}\n}\n","// const ActiveEntityOverlay: FunctionComponent = ({ children }) => null;\n\nimport styled from '@emotion/styled';\nimport React, { FunctionComponent } from 'react';\n\n// const ActiveEntityOverlay: FunctionComponent = ({ children }) => null;\nconst ActiveEntityOverlayWrapper = styled.section`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n`;\n\nexport const ActiveEntityOverlay: FunctionComponent = () => (\n  <ActiveEntityOverlayWrapper>\n    <p>Heyyoo</p>\n  </ActiveEntityOverlayWrapper>\n);\n","import Color from 'color';\nimport React, { FunctionComponent, useMemo, useState } from 'react';\nimport { RandomScene } from '../scene/Scene';\nimport { Anchor } from '../space/Anchor';\nimport { Coordinate } from '../space/Coordinate';\nimport { MonochromeBox } from '../space/MonochromeBox';\nimport { distanceToCameraComparator } from '../space/PERSPECTIVE';\nimport { Viewport } from '../space/Viewport';\nimport { ActiveEntityOverlay } from '../ui/ActiveEntityOverlay';\n\nconst HelloWorldSceneTerrain: FunctionComponent<\n\t{\n\t\tcoordinate: Coordinate;\n\t} & (typeof MonochromeBox extends FunctionComponent<infer T> ? T : {})\n> = ({ coordinate: coord, ...monochromeBoxProps }) => {\n\tconst [isHovered, setIsHovered] = useState(false);\n\tconst translated = Coordinate.clone(coord).transform(-0.5, -0.5, -1);\n\treturn (\n\t\t<Anchor key={translated.toString()} x={translated.x} y={translated.y} z={translated.z}>\n\t\t\t<MonochromeBox\n\t\t\t\t{...monochromeBoxProps}\n\t\t\t\tfill={isHovered ? Color('#282c34').lighten(1) : undefined}\n\t\t\t\tstroke={isHovered ? Color('#fff') : undefined}\n\t\t\t\tinnerStroke={isHovered ? Color('#ccd1dd') : undefined}\n\t\t\t\tonMouseEnter={() => setIsHovered(true)}\n\t\t\t\tonMouseLeave={() => setIsHovered(false)}\n\t\t\t/>\n\t\t</Anchor>\n\t);\n};\n\nconst Demo: FunctionComponent = () => {\n\tconst size = 40;\n\tconst scene = useMemo(() => new RandomScene(size, size), []);\n\tconst centerIndex = Math.floor((size + 1 - (size % 2)) * (size / 2));\n\tconst [centerCoord, setCenterCoord] = useState(scene.terrain[centerIndex]);\n\n\tconst zoomFactor = 1;\n\n\tconst terrain = useMemo(\n\t\t() =>\n\t\t\tscene.terrain\n\t\t\t\t.slice()\n\t\t\t\t.sort(distanceToCameraComparator)\n\t\t\t\t.map(coord => (\n\t\t\t\t\t<HelloWorldSceneTerrain\n\t\t\t\t\t\tkey={coord.toString()}\n\t\t\t\t\t\tcoordinate={coord}\n\t\t\t\t\t\tonClick={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tsetCenterCoord(coord);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t)),\n\t\t[scene.terrain]\n\t);\n\n\tconst entities = useMemo(\n\t\t() =>\n\t\t\tscene.entities\n\t\t\t\t.slice()\n\t\t\t\t.sort((a, b) => distanceToCameraComparator(a.location, b.location))\n\t\t\t\t.map(entity => {\n\t\t\t\t\tconst Component = entity.Component;\n\t\t\t\t\treturn <Component key={entity.id} />;\n\t\t\t\t}),\n\t\t[scene.entities]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Viewport center={centerCoord} zoom={zoomFactor}>\n\t\t\t\t<g id=\"scene-terrain\">{terrain}</g>\n\t\t\t\t<g id=\"scene-entities\">{entities}</g>\n\t\t\t</Viewport>\n\t\t\t<ActiveEntityOverlay />\n\t\t</>\n\t);\n};\nexport default Demo;\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport DemoCubes from './demos/demo.cubes';\nimport SceneHelloWorld from './demos/scene.hello-world';\n\nfunction Demos() {\n\treturn (\n\t\t<>\n\t\t\t<ul>\n\t\t\t\t<li>\n\t\t\t\t\t<Link to=\"/tests\">Tests</Link>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t<Route exact path=\"/tests\" component={DemoCubes} />\n\t\t</>\n\t);\n}\n\nfunction App() {\n\treturn (\n\t\t<Switch>\n\t\t\t<Route exact path=\"/\" component={SceneHelloWorld} />\n\t\t\t<Route component={Demos} />\n\t\t</Switch>\n\t);\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/nebula-282c34.dda754f6.png\";","import { css } from '@emotion/react';\nimport nebulaTexture from './textures/nebula-282c34.png';\n\nconst styles = css`\n\tbody {\n\t\tbackground: url(${nebulaTexture});\n\t}\n`;\n\nexport default styles;\n","import { Global } from '@emotion/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\nimport globalStyleRules from './styles';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Global styles={globalStyleRules} />\n\t\t<HashRouter hashType={'slash'}>\n\t\t\t<App />\n\t\t</HashRouter>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}